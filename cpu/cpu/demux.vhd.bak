library IEEE;
use IEEE.STD_LOGIC_1664.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

-- interface
entity demux is
	port(
			input_data : in STD_LOGIC_VECTOR(7 downto 0); -- sinal de entrada
			Sel : in STD_LOGIC_VECTOR(1 downto 0); -- sinal de seleção
			output_0 : out STD_LOGIC_VECTOR(7 downto 0); 
			output_1 : out STD_LOGIC_VECTOR(7 downto 0);
			output_2 : out STD_LOGIC_VECTOR(7 downto 0);
			output_3 : out STD_LOGIC_VECTOR(7 downto 0)
			);
end demux;

architecture Behavioral of demux is
begin
	process (input_data, Sel)
	begin
		output_0 <= (others => '0');
		output_1 <= (others => '0');
		output_2 <= (others => '0');
		output_3 <= (others => '0');
		
		case Sel is
			when "00" =>
				output_0 <= input_data;
			when "01" =>
				output_1 <= input_data;
			when "10" =>
				output_2 <= input_data;
			when "11" =>
				output_3 <= input_data;
			when others => null;
		end case;
	end process;
end Behavioral;